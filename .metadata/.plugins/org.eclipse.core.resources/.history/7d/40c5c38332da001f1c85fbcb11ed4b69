package com.ecommerce.controller;

import java.io.IOException;

import com.ecommerce.dao.ProductDAO;
import com.ecommerce.daoimpl.ProductDAOImpl;
import com.ecommerce.model.CartItem;
import com.ecommerce.model.ProductItems;

import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

public class CartServlet extends HttpServlet {

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        HttpSession session = req.getSession();
        Cart cart = (Cart) session.getAttribute("cart");

        // Initialize cart if it doesn't exist in the session
        if (cart == null) {
            cart = new Cart();
            session.setAttribute("cart", cart);
        }

        String action = req.getParameter("action");
        int productId = Integer.parseInt(req.getParameter("productId"));

        ProductDAO productDAO = new ProductDAOImpl();
        ProductItems product = productDAO.getProductById(productId);

        if (product == null) {
            resp.sendRedirect("error.jsp?message=Product not found");
            return;
        }

        switch (action) {
            case "add":
                // Add product to cart
                CartItem cartItem = cart.getItem(productId);
                if (cartItem != null) {
                    cartItem.setQuantity(cartItem.getQuantity() + 1);
                } else {
                    cartItem = new CartItem(
                        product.getProductId(),
                        productId,
                        product.getName(),
                        1, // Default quantity
                        product.getPrice(),
                        product.getImagePath()
                    );
                    cart.addItem(cartItem);
                }
                session.setAttribute("cart", cart);
                resp.sendRedirect("cart.jsp");
                break;

            case "update":
                // Update product quantity
                int quantity = Integer.parseInt(req.getParameter("quantity"));
                if (quantity <= 0) {
                    cart.remove(productId);
                } else {
                    cart.update(productId, quantity);
                }
                session.setAttribute("cart", cart);
                resp.sendRedirect("cart.jsp");
                break;

            case "remove":
                // Remove product from cart
                cart.remove(productId);
                session.setAttribute("cart", cart);
                resp.sendRedirect("cart.jsp");
                break;

            case "buy":
                // Add product and redirect to checkout
                CartItem buyItem = new CartItem(
                    product.getProductId(),
                    productId,
                    product.getName(),
                    1, // Default quantity
                    product.getPrice(),
                    product.getImagePath()
                );
                cart.addItem(buyItem);
                session.setAttribute("cart", cart);
                resp.sendRedirect("checkout.jsp");
                break;

            default:
                resp.sendRedirect("error.jsp?message=Invalid action");
                break;
        }
    }
}
