/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.8
 * Generated at: 2025-01-28 12:15:38 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class orderConfirmation_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>Order Confirmed</title>\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\">\r\n");
      out.write("    <style>\r\n");
      out.write("        :root {\r\n");
      out.write("            --primary-color: #4CAF50;\r\n");
      out.write("            --secondary-color: #45a049;\r\n");
      out.write("            --background-color: #f4f4f4;\r\n");
      out.write("            --text-color: #333;\r\n");
      out.write("            --accent-color: #FFC107;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        * {\r\n");
      out.write("            margin: 0;\r\n");
      out.write("            padding: 0;\r\n");
      out.write("            box-sizing: border-box;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        body {\r\n");
      out.write("            font-family: Arial, sans-serif;\r\n");
      out.write("            background-color: var(--background-color);\r\n");
      out.write("            color: var(--text-color);\r\n");
      out.write("            display: flex;\r\n");
      out.write("            justify-content: center;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("            height: 100vh;\r\n");
      out.write("            overflow: hidden;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .container {\r\n");
      out.write("            background-color: #fff;\r\n");
      out.write("            border-radius: 8px;\r\n");
      out.write("            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n");
      out.write("            padding: 40px;\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            max-width: 400px;\r\n");
      out.write("            width: 90%;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .checkmark {\r\n");
      out.write("            width: 80px;\r\n");
      out.write("            height: 80px;\r\n");
      out.write("            border-radius: 50%;\r\n");
      out.write("            display: block;\r\n");
      out.write("            stroke-width: 2;\r\n");
      out.write("            stroke: #fff;\r\n");
      out.write("            stroke-miterlimit: 10;\r\n");
      out.write("            box-shadow: inset 0px 0px 0px var(--primary-color);\r\n");
      out.write("            animation: fill .4s ease-in-out .4s forwards, scale .3s ease-in-out .9s both;\r\n");
      out.write("            margin: 0 auto 30px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .checkmark__circle {\r\n");
      out.write("            stroke-dasharray: 166;\r\n");
      out.write("            stroke-dashoffset: 166;\r\n");
      out.write("            stroke-width: 2;\r\n");
      out.write("            stroke-miterlimit: 10;\r\n");
      out.write("            stroke: var(--primary-color);\r\n");
      out.write("            fill: none;\r\n");
      out.write("            animation: stroke 0.6s cubic-bezier(0.65, 0, 0.45, 1) forwards;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .checkmark__check {\r\n");
      out.write("            transform-origin: 50% 50%;\r\n");
      out.write("            stroke-dasharray: 48;\r\n");
      out.write("            stroke-dashoffset: 48;\r\n");
      out.write("            animation: stroke 0.3s cubic-bezier(0.65, 0, 0.45, 1) 0.8s forwards;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        @keyframes stroke {\r\n");
      out.write("            100% {\r\n");
      out.write("                stroke-dashoffset: 0;\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        @keyframes scale {\r\n");
      out.write("            0%, 100% {\r\n");
      out.write("                transform: none;\r\n");
      out.write("            }\r\n");
      out.write("            50% {\r\n");
      out.write("                transform: scale3d(1.1, 1.1, 1);\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        @keyframes fill {\r\n");
      out.write("            100% {\r\n");
      out.write("                box-shadow: inset 0px 0px 0px 30px var(--primary-color);\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        h1 {\r\n");
      out.write("            color: var(--primary-color);\r\n");
      out.write("            margin-bottom: 20px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        p {\r\n");
      out.write("            margin-bottom: 20px;\r\n");
      out.write("            line-height: 1.5;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .timer {\r\n");
      out.write("            font-size: 24px;\r\n");
      out.write("            font-weight: bold;\r\n");
      out.write("            color: var(--accent-color);\r\n");
      out.write("            margin-bottom: 30px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .home-button {\r\n");
      out.write("            background-color: var(--primary-color);\r\n");
      out.write("            color: white;\r\n");
      out.write("            border: none;\r\n");
      out.write("            padding: 10px 20px;\r\n");
      out.write("            font-size: 16px;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("            transition: background-color 0.3s, transform 0.1s;\r\n");
      out.write("            display: inline-flex;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("            justify-content: center;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .home-button:hover {\r\n");
      out.write("            background-color: var(--secondary-color);\r\n");
      out.write("            transform: translateY(-2px);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .home-button i {\r\n");
      out.write("            margin-right: 8px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        @media (max-width: 480px) {\r\n");
      out.write("            .container {\r\n");
      out.write("                padding: 30px;\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            .checkmark {\r\n");
      out.write("                width: 60px;\r\n");
      out.write("                height: 60px;\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            h1 {\r\n");
      out.write("                font-size: 24px;\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            .timer {\r\n");
      out.write("                font-size: 20px;\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("        <svg class=\"checkmark\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 52 52\">\r\n");
      out.write("            <circle class=\"checkmark__circle\" cx=\"26\" cy=\"26\" r=\"25\" fill=\"none\"/>\r\n");
      out.write("            <path class=\"checkmark__check\" fill=\"none\" d=\"M14.1 27.2l7.1 7.2 16.7-16.8\"/>\r\n");
      out.write("        </svg>\r\n");
      out.write("        <h1>Order Confirmed!</h1>\r\n");
      out.write("        <p>Thank you for your purchase. Your order has been successfully placed and will be processed shortly.</p>\r\n");
      out.write("        <div class=\"timer\" id=\"timer\">Redirecting to Home</div>\r\n");
      out.write("        <button class=\"home-button\" onclick=\"goToHome()\">\r\n");
      out.write("            <i class=\"fas fa-home\"></i> Go to Home\r\n");
      out.write("        </button>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <script>\r\n");
      out.write("        let timeLeft = 10;\r\n");
      out.write("        const timerElement = document.getElementById('timer');\r\n");
      out.write("\r\n");
      out.write("        function updateTimer() {\r\n");
      out.write("            timerElement.textContent = `Redirecting in: ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${timeLeft}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("`;\r\n");
      out.write("            if (timeLeft === 0) {\r\n");
      out.write("                goToHome();\r\n");
      out.write("            } else {\r\n");
      out.write("                timeLeft--;\r\n");
      out.write("                setTimeout(updateTimer, 1000);\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function goToHome() {\r\n");
      out.write("            window.location.href = 'home.jsp';\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        updateTimer();\r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
